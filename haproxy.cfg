global
    log stdout format raw local0

    # log /dev/log    local0
    # log /dev/log    local1 notice
    # chroot /var/lib/haproxy
    # stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    # stats timeout 30s
    # user haproxy
    # group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL). This list is from:
    #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    # An alternative list with additional directives can be obtained from
    #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options no-sslv3

defaults
    log global
    mode    http
    # option  httplog
    option  dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

frontend ccloud
        mode tcp
        bind *:9092
        bind *:443
        log global

        tcp-request inspect-delay 5s
        tcp-request content accept if { req.ssl_hello_type 1 }

###  SNI Config
        acl is_broker0 req.ssl_sni -i b0-BOOTSTRAP_HOSTNAME
        acl is_broker1 req.ssl_sni -i b1-BOOTSTRAP_HOSTNAME
        acl is_broker2 req.ssl_sni -i b2-BOOTSTRAP_HOSTNAME
        acl is_broker3 req.ssl_sni -i b3-BOOTSTRAP_HOSTNAME
        acl is_broker4 req.ssl_sni -i b4-BOOTSTRAP_HOSTNAME
        acl is_broker5 req.ssl_sni -i b5-BOOTSTRAP_HOSTNAME

        acl is_bootstrap req.ssl_sni -i BOOTSTRAP_HOSTNAME

        use_backend broker0 if is_broker0
        use_backend broker1 if is_broker1
        use_backend broker2 if is_broker2
        use_backend broker3 if is_broker3
        use_backend broker4 if is_broker4
        use_backend broker5 if is_broker5

        use_backend bootstrap if is_bootstrap

### backend definitions 
backend broker0
        mode tcp
        server broker0 b0-BOOTSTRAP_HOSTNAME:9092 check

backend broker1
           mode tcp
           server broker1 b1-BOOTSTRAP_HOSTNAME:9092 check

backend broker2
           mode tcp
        server broker2 b2-BOOTSTRAP_HOSTNAME:9092 check

backend broker3
        mode tcp
        server broker3 b3-BOOTSTRAP_HOSTNAME:9092 check

backend broker4
        mode tcp
        server broker4 b4-BOOTSTRAP_HOSTNAME:9092 check

backend broker5
        mode tcp
        server broker5 b5-BOOTSTRAP_HOSTNAME:9092 check

backend bootstrap
        mode tcp
        server bootstrap BOOTSTRAP_HOSTNAME:9092 check
